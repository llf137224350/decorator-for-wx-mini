"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageLifetimes = exports.Lifetimes = exports.Observers = exports.Method = exports.Data = exports.Prop = exports.Behaviors = exports.ExternalClasses = exports.Component = void 0;
function Components(Target) {
    var target = new Target();
    target.__proto__.__proto__._init.call(target);
    Component(target);
}
exports.Component = Components;
function Prop(target, propertyKey) {
    if (!target.properties) {
        target['properties'] = {};
    }
    target.properties[propertyKey] = {
        type: Object,
        value: null
    };
}
exports.Prop = Prop;
function Data(target, propertyKey) {
    if (!target.data) {
        target['data'] = {};
    }
    target.data[propertyKey] = null;
}
exports.Data = Data;
function Method(target, propertyKey) {
    if (!target.methods) {
        target['methods'] = {};
    }
    target.methods[propertyKey] = target[propertyKey];
}
exports.Method = Method;
function ExternalClasses(target, propertyKey) {
    if (!target.externalClasses) {
        target['externalClasses'] = [];
    }
    target.externalClasses = __spreadArrays(target.externalClasses, [propertyKey]);
}
exports.ExternalClasses = ExternalClasses;
function Behaviors(target, propertyKey) {
    if (!target.behaviors) {
        target['behaviors'] = [];
    }
    target.behaviors = __spreadArrays(target.behaviors, [propertyKey]);
}
exports.Behaviors = Behaviors;
function Observers(monitoredObject) {
    return function (target, propertyKey) {
        if (!target.observers) {
            target['observers'] = {};
        }
        target.observers[monitoredObject] = target[propertyKey];
    };
}
exports.Observers = Observers;
function Lifetimes(target, propertyKey) {
    if (!target.lifetimes) {
        target['lifetimes'] = {};
    }
    target.lifetimes[propertyKey] = target[propertyKey];
}
exports.Lifetimes = Lifetimes;
function PageLifetimes(target, propertyKey) {
    if (!target.pageLifetimes) {
        target['pageLifetimes'] = {};
    }
    target.pageLifetimes[propertyKey] = target[propertyKey];
}
exports.PageLifetimes = PageLifetimes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFZQSxTQUFTLFVBQVUsQ0FBQyxNQUFXO0lBQzdCLElBQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFFNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQXNHc0IsK0JBQVM7QUEvRmhDLFNBQVMsSUFBSSxDQUFDLE1BQVcsRUFBRSxXQUFtQjtJQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUN0QixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzNCO0lBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRztRQUMvQixJQUFJLEVBQUUsTUFBTTtRQUNaLEtBQUssRUFBRSxJQUFJO0tBQ1osQ0FBQztBQUNKLENBQUM7QUF1RjZELG9CQUFJO0FBaEZsRSxTQUFTLElBQUksQ0FBQyxNQUFXLEVBQUUsV0FBbUI7SUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNyQjtJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ2xDLENBQUM7QUEyRW1FLG9CQUFJO0FBcEV4RSxTQUFTLE1BQU0sQ0FBQyxNQUFXLEVBQUUsV0FBbUI7SUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN4QjtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUErRHlFLHdCQUFNO0FBeERoRixTQUFTLGVBQWUsQ0FBQyxNQUFXLEVBQUUsV0FBbUI7SUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7UUFDM0IsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ2hDO0lBQ0QsTUFBTSxDQUFDLGVBQWUsa0JBQU8sTUFBTSxDQUFDLGVBQWUsR0FBRSxXQUFXLEVBQUMsQ0FBQztBQUNwRSxDQUFDO0FBbURpQywwQ0FBZTtBQTdDakQsU0FBUyxTQUFTLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ3JCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDMUI7SUFDRCxNQUFNLENBQUMsU0FBUyxrQkFBTyxNQUFNLENBQUMsU0FBUyxHQUFFLFdBQVcsRUFBQyxDQUFDO0FBQ3hELENBQUM7QUF3Q2tELDhCQUFTO0FBakM1RCxTQUFTLFNBQVMsQ0FBQyxlQUF1QjtJQUN4QyxPQUFPLFVBQVUsTUFBVyxFQUFFLFdBQW1CO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDMUI7UUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7QUFDSixDQUFDO0FBMEJpRiw4QkFBUztBQW5CM0YsU0FBUyxTQUFTLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ3JCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDMUI7SUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBYzRGLDhCQUFTO0FBTnRHLFNBQVMsYUFBYSxDQUFDLE1BQVcsRUFBRSxXQUFtQjtJQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtRQUN6QixNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCO0lBQ0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUN1RyxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBAQXV0aG9yOiDjgYQg54uC5aWU55qE6JyX54mbXG4gKiBARGF0ZTogMjAyMS0wNS0wNiAwMDowNDoyMVxuICogQExhc3RFZGl0VGltZTogMjAyMS0wNS0xMSAxNzowMDoyNFxuICogQERlc2NyaXB0aW9uOue7hOS7tuijhemlsOWZqFxuICovXG5cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDlo7DmmI7nu4Tku7ZcbiAqIEBwYXJhbSB7YW55fSBUYXJnZXRcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIENvbXBvbmVudHMoVGFyZ2V0OiBhbnkpIHtcbiAgY29uc3QgdGFyZ2V0ID0gbmV3IFRhcmdldCgpO1xuICAvLyDlpITnkIbnu4Tku7blsZ7mgKdcbiAgdGFyZ2V0Ll9fcHJvdG9fXy5fX3Byb3RvX18uX2luaXQuY2FsbCh0YXJnZXQpO1xuICBDb21wb25lbnQodGFyZ2V0KTtcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDlrprkuYnnu4Tku7blsZ7mgKdcbiAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eUtleVxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gUHJvcCh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICBpZiAoIXRhcmdldC5wcm9wZXJ0aWVzKSB7XG4gICAgdGFyZ2V0Wydwcm9wZXJ0aWVzJ10gPSB7fTtcbiAgfVxuICB0YXJnZXQucHJvcGVydGllc1twcm9wZXJ0eUtleV0gPSB7XG4gICAgdHlwZTogT2JqZWN0LFxuICAgIHZhbHVlOiBudWxsXG4gIH07XG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjogIOWumuS5iWRhdGHmlbDmja5cbiAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eUtleVxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gRGF0YSh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICBpZiAoIXRhcmdldC5kYXRhKSB7XG4gICAgdGFyZ2V0WydkYXRhJ10gPSB7fTtcbiAgfVxuICB0YXJnZXQuZGF0YVtwcm9wZXJ0eUtleV0gPSBudWxsO1xufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOWumuS5ieaWueazlVxuICogQHBhcmFtIHthbnl9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5S2V5XG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBNZXRob2QodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgaWYgKCF0YXJnZXQubWV0aG9kcykge1xuICAgIHRhcmdldFsnbWV0aG9kcyddID0ge307XG4gIH1cbiAgdGFyZ2V0Lm1ldGhvZHNbcHJvcGVydHlLZXldID0gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiDlr7nlpJbmmrTpnLJjc3PmianlsZVcbiAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eUtleVxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gRXh0ZXJuYWxDbGFzc2VzKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gIGlmICghdGFyZ2V0LmV4dGVybmFsQ2xhc3Nlcykge1xuICAgIHRhcmdldFsnZXh0ZXJuYWxDbGFzc2VzJ10gPSBbXTtcbiAgfVxuICB0YXJnZXQuZXh0ZXJuYWxDbGFzc2VzID0gWy4uLnRhcmdldC5leHRlcm5hbENsYXNzZXMsIHByb3BlcnR5S2V5XTtcbn1cbi8qKlxuICog57uE5Lu26YC76L6R5aSN55SoXG4gKiBAcGFyYW0gdGFyZ2V0XG4gKiBAcGFyYW0gcHJvcGVydHlLZXlcbiAqL1xuZnVuY3Rpb24gQmVoYXZpb3JzKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gIGlmICghdGFyZ2V0LmJlaGF2aW9ycykge1xuICAgIHRhcmdldFsnYmVoYXZpb3JzJ10gPSBbXTtcbiAgfVxuICB0YXJnZXQuYmVoYXZpb3JzID0gWy4uLnRhcmdldC5iZWhhdmlvcnMsIHByb3BlcnR5S2V5XTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOebkeWQrOWxnuaAp+WAvOeahOabtOaUuVxuICogQHBhcmFtIHtzdHJpbmd9IG1vbml0b3JlZE9iamVjdFxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gT2JzZXJ2ZXJzKG1vbml0b3JlZE9iamVjdDogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoIXRhcmdldC5vYnNlcnZlcnMpIHtcbiAgICAgIHRhcmdldFsnb2JzZXJ2ZXJzJ10gPSB7fTtcbiAgICB9XG4gICAgdGFyZ2V0Lm9ic2VydmVyc1ttb25pdG9yZWRPYmplY3RdID0gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfTtcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiAg57uE5Lu255Sf5ZG95ZGo5pyfXG4gKiBAcGFyYW0ge2FueX0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlLZXlcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIExpZmV0aW1lcyh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICBpZiAoIXRhcmdldC5saWZldGltZXMpIHtcbiAgICB0YXJnZXRbJ2xpZmV0aW1lcyddID0ge307XG4gIH1cbiAgdGFyZ2V0LmxpZmV0aW1lc1twcm9wZXJ0eUtleV0gPSB0YXJnZXRbcHJvcGVydHlLZXldO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbjogIOmhtemdoueUn+WRveWRqOacn1xuICogQHBhcmFtIHthbnl9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5S2V5XG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBQYWdlTGlmZXRpbWVzKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gIGlmICghdGFyZ2V0LnBhZ2VMaWZldGltZXMpIHtcbiAgICB0YXJnZXRbJ3BhZ2VMaWZldGltZXMnXSA9IHt9O1xuICB9XG4gIHRhcmdldC5wYWdlTGlmZXRpbWVzW3Byb3BlcnR5S2V5XSA9IHRhcmdldFtwcm9wZXJ0eUtleV07XG59XG5leHBvcnQgeyBDb21wb25lbnRzIGFzIENvbXBvbmVudCwgRXh0ZXJuYWxDbGFzc2VzLCBCZWhhdmlvcnMsIFByb3AsIERhdGEsIE1ldGhvZCwgT2JzZXJ2ZXJzLCBMaWZldGltZXMsIFBhZ2VMaWZldGltZXMgfTtcbiJdfQ==