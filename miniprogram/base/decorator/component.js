"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageLifetimes = exports.Lifetimes = exports.Observers = exports.Method = exports.Data = exports.Prop = exports.Behaviors = exports.ExternalClasses = exports.Component = void 0;
function Components(Target) {
    var target = new Target();
    target.__proto__.__proto__._init.call(target);
    Component(target);
}
exports.Component = Components;
function Prop(target, propertyKey) {
    if (!target.properties) {
        target['properties'] = {};
    }
    target.properties[propertyKey] = {
        type: Object,
        value: null
    };
}
exports.Prop = Prop;
function Data(target, propertyKey) {
    if (!target.data) {
        target['data'] = {};
    }
    target.data[propertyKey] = null;
}
exports.Data = Data;
function Method(target, propertyKey) {
    if (!target.methods) {
        target['methods'] = {};
    }
    target.methods[propertyKey] = target[propertyKey];
}
exports.Method = Method;
function ExternalClasses(target, propertyKey) {
    if (!target.externalClasses) {
        target['externalClasses'] = [];
    }
    target.externalClasses = __spreadArray(__spreadArray([], target.externalClasses), [propertyKey]);
}
exports.ExternalClasses = ExternalClasses;
function Behaviors(target, propertyKey) {
    if (!target.behaviors) {
        target['behaviors'] = [];
    }
    target.behaviors = __spreadArray(__spreadArray([], target.behaviors), [propertyKey]);
}
exports.Behaviors = Behaviors;
function Observers(monitoredObject) {
    return function (target, propertyKey) {
        if (!target.observers) {
            target['observers'] = {};
        }
        target.observers[monitoredObject] = target[propertyKey];
    };
}
exports.Observers = Observers;
function Lifetimes(target, propertyKey) {
    if (!target.lifetimes) {
        target['lifetimes'] = {};
    }
    if (propertyKey === 'created') {
        var createdStr = target.created.toString();
        if (createdStr && createdStr.indexOf('Object.keys(this.data)') === -1 && createdStr.indexOf('prototype.created.call(this)') === -1) {
            throw new Error('子类复写@Lifetimes public created()方式时，必须调用super.created();方法');
        }
    }
    target.lifetimes[propertyKey] = target[propertyKey];
}
exports.Lifetimes = Lifetimes;
function PageLifetimes(target, propertyKey) {
    if (!target.pageLifetimes) {
        target['pageLifetimes'] = {};
    }
    target.pageLifetimes[propertyKey] = target[propertyKey];
}
exports.PageLifetimes = PageLifetimes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBWUEsU0FBUyxVQUFVLENBQUMsTUFBVztJQUM3QixJQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBRTVCLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUE0R3NCLCtCQUFTO0FBckdoQyxTQUFTLElBQUksQ0FBQyxNQUFXLEVBQUUsV0FBbUI7SUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7UUFDdEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUMzQjtJQUNELE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUc7UUFDL0IsSUFBSSxFQUFFLE1BQU07UUFDWixLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUM7QUFDSixDQUFDO0FBNkY2RCxvQkFBSTtBQXRGbEUsU0FBUyxJQUFJLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ2hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDckI7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNsQyxDQUFDO0FBaUZtRSxvQkFBSTtBQTFFeEUsU0FBUyxNQUFNLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ25CLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDeEI7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBcUV5RSx3QkFBTTtBQTlEaEYsU0FBUyxlQUFlLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQ3ZELElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFO1FBQzNCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNoQztJQUNELE1BQU0sQ0FBQyxlQUFlLG1DQUFPLE1BQU0sQ0FBQyxlQUFlLElBQUUsV0FBVyxFQUFDLENBQUM7QUFDcEUsQ0FBQztBQXlEaUMsMENBQWU7QUFuRGpELFNBQVMsU0FBUyxDQUFDLE1BQVcsRUFBRSxXQUFtQjtJQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNyQixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzFCO0lBQ0QsTUFBTSxDQUFDLFNBQVMsbUNBQU8sTUFBTSxDQUFDLFNBQVMsSUFBRSxXQUFXLEVBQUMsQ0FBQztBQUN4RCxDQUFDO0FBOENrRCw4QkFBUztBQXZDNUQsU0FBUyxTQUFTLENBQUMsZUFBdUI7SUFDeEMsT0FBTyxVQUFVLE1BQVcsRUFBRSxXQUFtQjtRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNyQixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWdDaUYsOEJBQVM7QUF6QjNGLFNBQVMsU0FBUyxDQUFDLE1BQVcsRUFBRSxXQUFtQjtJQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNyQixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzFCO0lBQ0QsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1FBQzdCLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDN0MsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNsSSxNQUFNLElBQUksS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7U0FDOUU7S0FDRjtJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFjNEYsOEJBQVM7QUFOdEcsU0FBUyxhQUFhLENBQUMsTUFBVyxFQUFFLFdBQW1CO0lBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO1FBQ3pCLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDOUI7SUFDRCxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBQ3VHLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBBdXRob3I6IOOBhCDni4LlpZTnmoTonJfniZtcbiAqIEBEYXRlOiAyMDIxLTA1LTA2IDAwOjA0OjIxXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIxLTA1LTE0IDExOjI5OjQ1XG4gKiBARGVzY3JpcHRpb24657uE5Lu26KOF6aWw5ZmoXG4gKi9cblxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOWjsOaYjue7hOS7tlxuICogQHBhcmFtIHthbnl9IFRhcmdldFxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gQ29tcG9uZW50cyhUYXJnZXQ6IGFueSkge1xuICBjb25zdCB0YXJnZXQgPSBuZXcgVGFyZ2V0KCk7XG4gIC8vIOWkhOeQhue7hOS7tuWxnuaAp1xuICB0YXJnZXQuX19wcm90b19fLl9fcHJvdG9fXy5faW5pdC5jYWxsKHRhcmdldCk7XG4gIENvbXBvbmVudCh0YXJnZXQpO1xufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOWumuS5iee7hOS7tuWxnuaAp1xuICogQHBhcmFtIHthbnl9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5S2V5XG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBQcm9wKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gIGlmICghdGFyZ2V0LnByb3BlcnRpZXMpIHtcbiAgICB0YXJnZXRbJ3Byb3BlcnRpZXMnXSA9IHt9O1xuICB9XG4gIHRhcmdldC5wcm9wZXJ0aWVzW3Byb3BlcnR5S2V5XSA9IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgdmFsdWU6IG51bGxcbiAgfTtcbn1cbi8qKlxuICogQGRlc2NyaXB0aW9uOiAg5a6a5LmJZGF0YeaVsOaNrlxuICogQHBhcmFtIHthbnl9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5S2V5XG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBEYXRhKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gIGlmICghdGFyZ2V0LmRhdGEpIHtcbiAgICB0YXJnZXRbJ2RhdGEnXSA9IHt9O1xuICB9XG4gIHRhcmdldC5kYXRhW3Byb3BlcnR5S2V5XSA9IG51bGw7XG59XG4vKipcbiAqIEBkZXNjcmlwdGlvbjog5a6a5LmJ5pa55rOVXG4gKiBAcGFyYW0ge2FueX0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlLZXlcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIE1ldGhvZCh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICBpZiAoIXRhcmdldC5tZXRob2RzKSB7XG4gICAgdGFyZ2V0WydtZXRob2RzJ10gPSB7fTtcbiAgfVxuICB0YXJnZXQubWV0aG9kc1twcm9wZXJ0eUtleV0gPSB0YXJnZXRbcHJvcGVydHlLZXldO1xufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246IOWvueWkluaatOmcsmNzc+aJqeWxlVxuICogQHBhcmFtIHthbnl9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5S2V5XG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBFeHRlcm5hbENsYXNzZXModGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgaWYgKCF0YXJnZXQuZXh0ZXJuYWxDbGFzc2VzKSB7XG4gICAgdGFyZ2V0WydleHRlcm5hbENsYXNzZXMnXSA9IFtdO1xuICB9XG4gIHRhcmdldC5leHRlcm5hbENsYXNzZXMgPSBbLi4udGFyZ2V0LmV4dGVybmFsQ2xhc3NlcywgcHJvcGVydHlLZXldO1xufVxuLyoqXG4gKiDnu4Tku7bpgLvovpHlpI3nlKhcbiAqIEBwYXJhbSB0YXJnZXRcbiAqIEBwYXJhbSBwcm9wZXJ0eUtleVxuICovXG5mdW5jdGlvbiBCZWhhdmlvcnModGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgaWYgKCF0YXJnZXQuYmVoYXZpb3JzKSB7XG4gICAgdGFyZ2V0WydiZWhhdmlvcnMnXSA9IFtdO1xuICB9XG4gIHRhcmdldC5iZWhhdmlvcnMgPSBbLi4udGFyZ2V0LmJlaGF2aW9ycywgcHJvcGVydHlLZXldO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbjog55uR5ZCs5bGe5oCn5YC855qE5pu05pS5XG4gKiBAcGFyYW0ge3N0cmluZ30gbW9uaXRvcmVkT2JqZWN0XG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBPYnNlcnZlcnMobW9uaXRvcmVkT2JqZWN0OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmICghdGFyZ2V0Lm9ic2VydmVycykge1xuICAgICAgdGFyZ2V0WydvYnNlcnZlcnMnXSA9IHt9O1xuICAgIH1cbiAgICB0YXJnZXQub2JzZXJ2ZXJzW21vbml0b3JlZE9iamVjdF0gPSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9O1xufVxuLyoqXG4gKiBAZGVzY3JpcHRpb246ICDnu4Tku7bnlJ/lkb3lkajmnJ9cbiAqIEBwYXJhbSB7YW55fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eUtleVxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gTGlmZXRpbWVzKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gIGlmICghdGFyZ2V0LmxpZmV0aW1lcykge1xuICAgIHRhcmdldFsnbGlmZXRpbWVzJ10gPSB7fTtcbiAgfVxuICBpZiAocHJvcGVydHlLZXkgPT09ICdjcmVhdGVkJykge1xuICAgIGNvbnN0IGNyZWF0ZWRTdHIgPSB0YXJnZXQuY3JlYXRlZC50b1N0cmluZygpO1xuICAgIGlmIChjcmVhdGVkU3RyICYmIGNyZWF0ZWRTdHIuaW5kZXhPZignT2JqZWN0LmtleXModGhpcy5kYXRhKScpID09PSAtMSAmJiBjcmVhdGVkU3RyLmluZGV4T2YoJ3Byb3RvdHlwZS5jcmVhdGVkLmNhbGwodGhpcyknKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign5a2Q57G75aSN5YaZQExpZmV0aW1lcyBwdWJsaWMgY3JlYXRlZCgp5pa55byP5pe277yM5b+F6aG76LCD55Soc3VwZXIuY3JlYXRlZCgpO+aWueazlScpO1xuICAgIH1cbiAgfVxuICB0YXJnZXQubGlmZXRpbWVzW3Byb3BlcnR5S2V5XSA9IHRhcmdldFtwcm9wZXJ0eUtleV07XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uOiAg6aG16Z2i55Sf5ZG95ZGo5pyfXG4gKiBAcGFyYW0ge2FueX0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlLZXlcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIFBhZ2VMaWZldGltZXModGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgaWYgKCF0YXJnZXQucGFnZUxpZmV0aW1lcykge1xuICAgIHRhcmdldFsncGFnZUxpZmV0aW1lcyddID0ge307XG4gIH1cbiAgdGFyZ2V0LnBhZ2VMaWZldGltZXNbcHJvcGVydHlLZXldID0gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbn1cbmV4cG9ydCB7IENvbXBvbmVudHMgYXMgQ29tcG9uZW50LCBFeHRlcm5hbENsYXNzZXMsIEJlaGF2aW9ycywgUHJvcCwgRGF0YSwgTWV0aG9kLCBPYnNlcnZlcnMsIExpZmV0aW1lcywgUGFnZUxpZmV0aW1lcyB9O1xuIl19