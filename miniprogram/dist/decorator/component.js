"use strict";
function Components(target) {
    Component(new target());
}
function ExternalClasses(classes) {
    return function (target, propertyKey) {
        console.log(propertyKey);
        if (!target.externalClasses) {
            target['externalClasses'] = [];
        }
        target.externalClasses = classes;
    };
}
function Prop(type, defaultValue) {
    if (type === void 0) { type = Object; }
    if (defaultValue === void 0) { defaultValue = {}; }
    return function (target, propertyKey) {
        if (!target.properties) {
            target['properties'] = {};
        }
        target.properties[propertyKey] = {
            type: type,
            value: defaultValue
        };
    };
}
function Data(defaultValue) {
    if (defaultValue === void 0) { defaultValue = {}; }
    return function (target, propertyKey) {
        if (!target.data) {
            target['data'] = {};
        }
        target.data[propertyKey] = defaultValue;
    };
}
function Method() {
    return function (target, propertyKey) {
        if (!target.methods) {
            target['methods'] = {};
        }
        target.methods[propertyKey] = target[propertyKey];
    };
}
function Observers(monitoredObject) {
    return function (target, propertyKey) {
        if (!target.observers) {
            target['observers'] = {};
        }
        target.observers[monitoredObject] = target[propertyKey];
    };
}
function Lifetimes() {
    return function (target, propertyKey) {
        if (!target.lifetimes) {
            target['lifetimes'] = {};
        }
        target.lifetimes[propertyKey] = target[propertyKey];
    };
}
function PageLifetimes() {
    return function (target, propertyKey) {
        if (!target.pageLifetimes) {
            target['pageLifetimes'] = {};
        }
        target.pageLifetimes[propertyKey] = target[propertyKey];
    };
}
module.exports = {
    Component: Components,
    ExternalClasses: ExternalClasses,
    Prop: Prop,
    Data: Data,
    Method: Method,
    Observers: Observers,
    Lifetimes: Lifetimes,
    PageLifetimes: PageLifetimes
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFLQSxTQUFTLFVBQVUsQ0FBQyxNQUFXO0lBQzdCLFNBQVMsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQU9ELFNBQVMsZUFBZSxDQUFDLE9BQWlCO0lBQ3hDLE9BQU8sVUFBVSxNQUFXLEVBQUUsV0FBb0I7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRTtZQUMzQixNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDaEM7UUFDRCxNQUFNLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQztJQUNuQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBUUQsU0FBUyxJQUFJLENBQUMsSUFBa0IsRUFBRSxZQUFzQjtJQUExQyxxQkFBQSxFQUFBLGFBQWtCO0lBQUUsNkJBQUEsRUFBQSxpQkFBc0I7SUFDdEQsT0FBTyxVQUFVLE1BQVcsRUFBRSxXQUFtQjtRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUN0QixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzNCO1FBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRztZQUMvQixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxZQUFZO1NBQ3BCLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBT0QsU0FBUyxJQUFJLENBQUMsWUFBc0I7SUFBdEIsNkJBQUEsRUFBQSxpQkFBc0I7SUFDbEMsT0FBTyxVQUFVLE1BQVcsRUFBRSxXQUFtQjtRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNoQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxZQUFZLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQU1ELFNBQVMsTUFBTTtJQUNiLE9BQU8sVUFBVSxNQUFXLEVBQUUsV0FBbUI7UUFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUN4QjtRQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztBQUNKLENBQUM7QUFRRCxTQUFTLFNBQVMsQ0FBQyxlQUF1QjtJQUN4QyxPQUFPLFVBQVUsTUFBVyxFQUFFLFdBQW1CO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDMUI7UUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7QUFDSixDQUFDO0FBTUQsU0FBUyxTQUFTO0lBQ2hCLE9BQU8sVUFBVSxNQUFXLEVBQUUsV0FBbUI7UUFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDckIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMxQjtRQUNELE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELENBQUMsQ0FBQztBQUNKLENBQUM7QUFNRCxTQUFTLGFBQWE7SUFDcEIsT0FBTyxVQUFVLE1BQVcsRUFBRSxXQUFtQjtRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUN6QixNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzlCO1FBQ0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUdELGlCQUFTO0lBQ1AsU0FBUyxFQUFFLFVBQVU7SUFDckIsZUFBZSxpQkFBQTtJQUNmLElBQUksTUFBQTtJQUNKLElBQUksTUFBQTtJQUNKLE1BQU0sUUFBQTtJQUNOLFNBQVMsV0FBQTtJQUNULFNBQVMsV0FBQTtJQUNULGFBQWEsZUFBQTtDQUNkLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3Ig44GEIOeLguWllOeahOicl+eJm1xuICogQGRhdGUgMjAyMC82LzlcbiAqIEBkZXNjIOe7hOS7tuijhemlsOWZqFxuICovXG5mdW5jdGlvbiBDb21wb25lbnRzKHRhcmdldDogYW55KSB7XG4gIENvbXBvbmVudChuZXcgdGFyZ2V0KCkpO1xufVxuXG4vKipcbiAqIOe7hOS7tuWkluimhueblue7hOS7tuWGheagt+W8j+aatOmcsmNsYXNzXG4gKiBAcGFyYW0gY2xhc3Nlc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEV4dGVybmFsQ2xhc3NlcyhjbGFzc2VzOiBzdHJpbmdbXSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleT86IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKHByb3BlcnR5S2V5KTtcbiAgICBpZiAoIXRhcmdldC5leHRlcm5hbENsYXNzZXMpIHtcbiAgICAgIHRhcmdldFsnZXh0ZXJuYWxDbGFzc2VzJ10gPSBbXTtcbiAgICB9XG4gICAgdGFyZ2V0LmV4dGVybmFsQ2xhc3NlcyA9IGNsYXNzZXM7XG4gIH07XG59XG5cbi8qKlxuICogcHJvcGVydGllc1xuICogQHBhcmFtIHR5cGUg57G75Z6LXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIOm7mOiupOWAvFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFByb3AodHlwZTogYW55ID0gT2JqZWN0LCBkZWZhdWx0VmFsdWU6IGFueSA9IHt9KSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoIXRhcmdldC5wcm9wZXJ0aWVzKSB7XG4gICAgICB0YXJnZXRbJ3Byb3BlcnRpZXMnXSA9IHt9O1xuICAgIH1cbiAgICB0YXJnZXQucHJvcGVydGllc1twcm9wZXJ0eUtleV0gPSB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZVxuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogZGF0YVxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSDpu5jorqTlgLxcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBEYXRhKGRlZmF1bHRWYWx1ZTogYW55ID0ge30pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmICghdGFyZ2V0LmRhdGEpIHtcbiAgICAgIHRhcmdldFsnZGF0YSddID0ge307XG4gICAgfVxuICAgIHRhcmdldC5kYXRhW3Byb3BlcnR5S2V5XSA9IGRlZmF1bHRWYWx1ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBtZXRob2RzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWV0aG9kKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gICAgaWYgKCF0YXJnZXQubWV0aG9kcykge1xuICAgICAgdGFyZ2V0WydtZXRob2RzJ10gPSB7fTtcbiAgICB9XG4gICAgdGFyZ2V0Lm1ldGhvZHNbcHJvcGVydHlLZXldID0gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfTtcbn1cblxuXG4vKipcbiAqIOWxnuaAp+ebkeWQrFxuICogQHBhcmFtIG1vbml0b3JlZE9iamVjdCDooqvnm5HlkKzlr7nosaFrZXlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBPYnNlcnZlcnMobW9uaXRvcmVkT2JqZWN0OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmICghdGFyZ2V0Lm9ic2VydmVycykge1xuICAgICAgdGFyZ2V0WydvYnNlcnZlcnMnXSA9IHt9O1xuICAgIH1cbiAgICB0YXJnZXQub2JzZXJ2ZXJzW21vbml0b3JlZE9iamVjdF0gPSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9O1xufVxuXG4vKipcbiAqIOeUn+WRveWRqOacn1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIExpZmV0aW1lcygpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmICghdGFyZ2V0LmxpZmV0aW1lcykge1xuICAgICAgdGFyZ2V0WydsaWZldGltZXMnXSA9IHt9O1xuICAgIH1cbiAgICB0YXJnZXQubGlmZXRpbWVzW3Byb3BlcnR5S2V5XSA9IHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH07XG59XG5cbi8qKlxuICog6aG16Z2i55Sf5ZG95ZGo5pyfXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZUxpZmV0aW1lcygpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmICghdGFyZ2V0LnBhZ2VMaWZldGltZXMpIHtcbiAgICAgIHRhcmdldFsncGFnZUxpZmV0aW1lcyddID0ge307XG4gICAgfVxuICAgIHRhcmdldC5wYWdlTGlmZXRpbWVzW3Byb3BlcnR5S2V5XSA9IHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH07XG59XG5cblxuZXhwb3J0ID0ge1xuICBDb21wb25lbnQ6IENvbXBvbmVudHMsXG4gIEV4dGVybmFsQ2xhc3NlcyxcbiAgUHJvcCxcbiAgRGF0YSxcbiAgTWV0aG9kLFxuICBPYnNlcnZlcnMsXG4gIExpZmV0aW1lcyxcbiAgUGFnZUxpZmV0aW1lc1xufVxuIl19